//created on: Jun 3, 2012
package main.solver;
	dialect "java"

//パッケージのインポート
import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreHolder;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import main.domain.Course;
import main.domain.Day;
import main.domain.Classroom;
import main.domain.DayWeek;
import main.domain.Schedule;
import main.domain.Week
import main.domain.CourseTotalSize;
import main.domain.BlockedClassroom;

//グローバル変数の宣言
global HardAndSoftScoreHolder scoreHolder;

//ルール①：開催日程は重複してはならない
rule "classroomOccupancy"
    when
        $leftSchedule : Schedule($leftId : scheduleID, $classroom : classroom)
        //rightSchedule not being held between active time of leftSchedule
        $rightSchedule : Schedule(scheduleID > $leftId, conflictDayCheck($leftSchedule) == true, classroom.equals($classroom))
        
    then
    	//System.out.println("classroomOccupancy @" + $leftSchedule.toString() + " & " + $rightSchedule.toString());
        insertLogical(new IntConstraintOccurrence("classroomOccupancy", ConstraintType.NEGATIVE_HARD,
                1,
                $leftSchedule, $rightSchedule));
end

//ルール②：コース定員が教室定員を上回ってはならない
rule "overCapacity"
    when
        $schedule : Schedule(classroom.capacity < course.eSize)
        
    then
        insertLogical(new IntConstraintOccurrence("overCapacity", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール③：コースを営業日以外に開催してはならない
rule "notFinishInWeek"
    when
        $schedule : Schedule( finishInWeek == false )       
    then
        insertLogical(new IntConstraintOccurrence("notFinishInWeek", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール④：PCの必要なコースをPCの無い教室に割り当ててはならない
rule "pcRequirement"
    when
        $schedule : Schedule(course.PC != null, classroom.PC != course.PC)
    then
        insertLogical(new IntConstraintOccurrence("pcRequirement", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール⑤：コースが要求するPCの種類が、教室が所有するPCの種類と違ってはならない
rule "pcTypeRequirement"
	when
		$schedule : Schedule(course.PC != null, checkPCRequirement() == false)
	then
	 insertLogical(new IntConstraintOccurrence("pcTypeRequirement", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール⑥：コースに指定教室がある場合は、指定教室以外の教室に割り当ててはならない
rule "fixedRoomRequirement"
	when
		$schedule : Schedule(checkFixedRoomRequirement() == false)
	then
		//System.out.println("fixedRoomRequirement");
	 insertLogical(new IntConstraintOccurrence("fixedRoomRequirement", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール⑦：コース定員を教室定員とするものに関して、計画後の総定員数が目標総定員数を下回ってはならない
//計画後定員数計算値のリセット

rule "totalSizeRequirement-check"
	when	
		$courseTotalSize : CourseTotalSize($course : course, $totalSize : totalSize)
		accumulate( Schedule( course.equals($course) == true , $size : classroom.getCapacity);
				$total : sum($size);
				$total < $totalSize)
	then
		//System.out.println("total of " + $course.toString() + " " + 
		//	$total + " "  + $totalSize);
	 	insertLogical(new IntConstraintOccurrence("totalSizeRequirement-check", ConstraintType.NEGATIVE_HARD,
                1,
                $courseTotalSize));
end


//ルール記述終了
rule "hardConstraintsBroken"
        salience -2 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardConstraintsBroken($hardTotal.intValue());
end


