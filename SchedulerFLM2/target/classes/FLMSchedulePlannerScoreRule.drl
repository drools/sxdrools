//created on: Jun 3, 2012
package main.solver;
	dialect "java"

//パッケージのインポート
import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreHolder;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import main.domain.Course;
import main.domain.Day;
import main.domain.Classroom;
import main.domain.DayWeek;
import main.domain.Schedule;
import main.domain.Week
import main.domain.CourseTotalSize;
import main.domain.BlockedClassroom;

import java.lang.Math;

//グローバル変数の宣言
global HardAndSoftScoreHolder scoreHolder;

// ############################################################################
// ハード制約
// ############################################################################

//ルール①：開催日程は重複してはならない
rule "classroomOccupancy"
    when
        $leftSchedule : Schedule($leftId : scheduleID, $classroom : classroom)
        //rightSchedule not being held between active time of leftSchedule
        $rightSchedule : Schedule(scheduleID > $leftId, conflictDayCheck($leftSchedule) == true, classroom.equals($classroom))
        
    then
    	//System.out.println("classroomOccupancy @" + $leftSchedule.toString() + " & " + $rightSchedule.toString());
        insertLogical(new IntConstraintOccurrence("classroomOccupancy", ConstraintType.NEGATIVE_HARD,
                1,
                $leftSchedule, $rightSchedule));
end

//ルール②：コース定員が教室定員を上回ってはならない
rule "overCapacity"
    when
        $schedule : Schedule(classroom.capacity < course.eSize)
        
    then
    	//System.out.println("overCapacity @" + $schedule.toString());
        insertLogical(new IntConstraintOccurrence("overCapacity", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール③：コースを営業日以外に開催してはならない
rule "notFinishInWeek"
    when
        $schedule : Schedule( finishInWeek == false )       
    then
    	//System.out.println("notFinishInWeek @" + $schedule.toString());
        insertLogical(new IntConstraintOccurrence("notFinishInWeek", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール④：PCの必要なコースをPCの無い教室に割り当ててはならない
rule "pcRequirement"
    when
        $schedule : Schedule(course.PC != null, classroom.PC != course.PC, course.getFixedRoomList().size() == 0)
    then
    	//System.out.println("pcRequirement @" + $schedule.toString());
        insertLogical(new IntConstraintOccurrence("pcRequirement", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール⑤：コースが要求するPCの種類が、教室が所有するPCの種類と違ってはならない
rule "pcTypeRequirement"
	when
		$schedule : Schedule(course.PC == true, checkPCRequirement() == false, course.getFixedRoomList().size() == 0)
	then
		//System.out.println("pcTypeRequirement @" + $schedule.toString());
	 	insertLogical(new IntConstraintOccurrence("pcTypeRequirement", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール⑥：コースに指定教室がある場合は、指定教室以外の教室に割り当ててはならない
rule "fixedRoomRequirement"
	when
		$schedule : Schedule(checkFixedRoomRequirement() == false)
	then
		//System.out.println("fixedRoomRequirement @" + $schedule.toString());
	 	insertLogical(new IntConstraintOccurrence("fixedRoomRequirement", ConstraintType.NEGATIVE_HARD,
                3,
                $schedule));
end

//ルール⑦：コース定員を教室定員とするものに関して、計画後の総定員数が目標総定員数を下回ってはならない
//（教室定員）
rule "totalSizeRequirement-check1"
	when	
		$courseTotalSize : CourseTotalSize($course : course, $totalSize : totalSize)
		accumulate(
			Schedule($scheduleID : scheduleID, course.equals($course) == true , course.geteSize() == 0, $size : classroom.getCapacity());
				//$minSize : min($size),
				$minID : min($scheduleID),
				$total : sum($size);
				$total < $totalSize)
		$schedule : Schedule( scheduleID == $minID.intValue() )
	then
		//System.out.println("totalSizeRequirement1 @ " + $course.toString() + " asis: " + $total + " tobe: "  + $totalSize);
	 	insertLogical(new IntConstraintOccurrence("totalSizeRequirement-check1", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule ));
end

//（固定値=ＭＡＸ値）
rule "totalSizeRequirement-check2"
	when	
		$courseTotalSize : CourseTotalSize($course : course, $totalSize : totalSize)
		accumulate(
			Schedule($scheduleID : scheduleID, course.equals($course) == true , $size : classroom.getCapacity(), course.geteSize() != 0, $eSize : course.geteSize());
				//$minSize : min($size),
				$minID : min($scheduleID),
				$total : sum(Math.min($size,$eSize));
				$total < $totalSize)
		$schedule : Schedule( scheduleID == $minID.intValue() )
	then
		//System.out.println("MAX :"+ Math.max(5,10));
		//System.out.println("totalSizeRequirement2 @ " + $course.toString() + " asis: " + $total + " tobe: "  + $totalSize);
	 	insertLogical(new IntConstraintOccurrence("totalSizeRequirement-check2", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule ));
end


//ルール⑧：ブロックされている教室にコースを割り当ててはならない
rule "classroomBlock"
	when
		$blockedClassroom : BlockedClassroom($classroom : classroom)
		$schedule : Schedule(classroom.equals($classroom) == true, 
			conflictDayCheck($blockedClassroom) == true)
	then
		//System.out.println("classroomBlock @ " + $schedule.toString() + " @ " + $blockedClassroom.toString());	
		insertLogical(new IntConstraintOccurrence("classroomBlock", ConstraintType.NEGATIVE_HARD,
                1,
                $schedule));
end

//ルール⑨：同じコースの開催開始日が同じになってはならない
rule "SameCourseDayConflict"
	when
        $leftSchedule : Schedule($leftID : scheduleID, $leftCourse : course ,$leftDay : day)
        //rightSchedule not being held between active time of leftSchedule
        $rightSchedule : Schedule(scheduleID > $leftID, course.equals($leftCourse) == true, day.equals($leftDay) == true)
        
    then
    	//System.out.println("SameCourseDayConflict @" + $leftSchedule.toString() + " & " + $rightSchedule.toString());
        insertLogical(new IntConstraintOccurrence("SameCourseDayConflict", ConstraintType.NEGATIVE_HARD,
                1,
                $leftSchedule, $rightSchedule));
end

// ############################################################################
// ソフト制約
// ############################################################################
//ルール①：定員の固定値を持つコースは、大きすぎる教室に割り当てないほうがよい。
rule "roomOptimization"
    when
        $classroom : Classroom($capacity : capacity)
        $schedule : Schedule(classroom.equals($classroom) == true, course.geteSize()!= 0 , $eSize : course.geteSize(), $size : classroom.getCapacity(),$size > $eSize)
    then
        insertLogical(new IntConstraintOccurrence("roomOptimization1", ConstraintType.NEGATIVE_SOFT,
                ($size-$eSize),
                $classroom, $schedule));
				System.out.println("Schedule" + $schedule.toString());
				System.out.println("classroom" + $classroom.toString());

end

//ルール②：計画後定員と総定員は近いほうがよい。（教室定員）
//（計画後定員-総定員）を減点する。
//教室定員
rule "totalSizeRequirement-Soft1"
	when	
		$courseTotalSize : CourseTotalSize($course : course, $totalSize : totalSize)
		accumulate(
			Schedule($scheduleID : scheduleID, course.equals($course) == true , course.geteSize() == 0, $size : classroom.getCapacity());
				//$minSize : min($size),
				$minID : min($scheduleID),
				$total : sum($size);
				$total > $totalSize)
		$schedule : Schedule( scheduleID == $minID.intValue() )
	then
		//System.out.println("total of2 " + $course.toString() + " " + 
		//$total + " "  + $totalSize);
	 	insertLogical(new IntConstraintOccurrence("totalSizeRequirement-Soft1", ConstraintType.NEGATIVE_SOFT,
	 			($total.intValue() - $totalSize),
               	$schedule));
end

//固定値＝ＭＡＸ値
rule "totalSizeRequirement-Soft2"
	when	
		$courseTotalSize : CourseTotalSize($course : course, $totalSize : totalSize)
		accumulate(
			Schedule($scheduleID : scheduleID, course.equals($course) == true , $size : classroom.getCapacity(), course.geteSize() != 0, $eSize : course.geteSize());
				//$minSize : min($size),
				$minID : min($scheduleID),
				$total : sum(Math.min($size,$eSize));
				$total > $totalSize)
		$schedule : Schedule( scheduleID == $minID.intValue() )
	then
		//System.out.println("total of1 " + $course.toString() + " " + 
		//$total + " "  + $totalSize);
	 	insertLogical(new IntConstraintOccurrence("totalSizeRequirement-Soft2", ConstraintType.NEGATIVE_SOFT,
	 			($total.intValue() - $totalSize),
               	$schedule));
end

/*
//ルール③：開催期間が四日のコースは火曜日に優先的に開催する。
//火曜日以外に割り当てた場合に1点減点する

rule "favoriteDayWeek-length4-Tuesday"
    when
        $schedule : Schedule(course.getLength() == 4, day.getDayweek().getDayweek != 1)
    then
        insertLogical(new IntConstraintOccurrence("favoriteDayWeek-length4-Tuesday", ConstraintType.NEGATIVE_SOFT,
                1,
                $schedule));
				//System.out.println("Schedule" + $schedule.toString());
				
end

//ルール④：開催期間が3日のコースの開催開始日は、月曜日か水曜日に優先的に開催する。
//月曜日・水曜日以外に割り当てた場合に1点減点する。

rule "favoriteDayWeek-length3-Monday,Wednesday"
    when
        $schedule : Schedule(course.getLength() == 3, day.getDayweek().getDayweek != 0 && day.getDayweek().getDayweek != 2)
    then
        insertLogical(new IntConstraintOccurrence("favoriteDayWeek-length3-Monday,Wednesday", ConstraintType.NEGATIVE_SOFT,
                1,
                $schedule));
				//System.out.println("Schedule" + $schedule.toString());
				end
				
//ルール⑤：開催期間が2日のコースの開催開始日は、月曜日か木曜日に優先的に開催する。
//月曜日・木曜日以外に割り当てた場合に1点減点する。

rule "favoriteDayWeek-Monday,Thursday"
    when
        $schedule : Schedule(course.getLength() == 2, day.getDayweek().getDayweek != 0 && day.getDayweek().getDayweek != 3)
    then
        insertLogical(new IntConstraintOccurrence("favoriteDayWeek-Friday", ConstraintType.NEGATIVE_SOFT,
                1,
                $schedule));
				//System.out.println("Schedule" + $schedule.toString());
				end		
*/

// ############################################################################
// スコアの計算
// ############################################################################

//ハード制約のスコア計算
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardConstraintsBroken($hardTotal.intValue());
		System.out.println($hardTotal.intValue());
end

//ソフト制約のスコア計算
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftConstraintsBroken($softTotal.intValue());
end



